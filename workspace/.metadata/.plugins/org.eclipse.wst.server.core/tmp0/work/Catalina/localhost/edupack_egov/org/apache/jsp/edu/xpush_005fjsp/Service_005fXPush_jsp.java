/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.54
 * Generated at: 2025-01-20 08:42:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.edu.xpush_005fjsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.commons.logging.*;
import com.nexacro.java.xapi.data.*;
import com.nexacro.java.xapi.tx.*;
import java.net.UnknownHostException.*;
import com.nexacro.xpush.api.PushMessageProvider;
import com.nexacro.xpush.api.PushResponse;
import com.nexacro.xpush.fw.io.ConnectionClosedException;
import com.nexacro.xpush.fw.service.provider.LoginFailException;
import com.nexacro.xpush.fw.service.provider.PushMessage;
import com.nexacro.xpush.message.Constants;
import java.util.*;
import java.sql.*;
import java.io.*;

public final class Service_005fXPush_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 
// Dataset value
public String  dsGet(DataSet ds, int rowno, String colid) throws Exception
{
    String value;
    value = ds.getString(rowno, colid);
    if( value == null )
        return "";
    else 
        return value;
} 

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("com.nexacro.java.xapi.tx");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("org.apache.commons.logging");
    _jspx_imports_packages.add("com.nexacro.java.xapi.data");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("java.net.UnknownHostException");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.nexacro.xpush.fw.service.provider.LoginFailException");
    _jspx_imports_classes.add("com.nexacro.xpush.message.Constants");
    _jspx_imports_classes.add("com.nexacro.xpush.fw.service.provider.PushMessage");
    _jspx_imports_classes.add("com.nexacro.xpush.api.PushResponse");
    _jspx_imports_classes.add("com.nexacro.xpush.fw.io.ConnectionClosedException");
    _jspx_imports_classes.add("com.nexacro.xpush.api.PushMessageProvider");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("  \n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

int nErrorCode = 0;
String strErrorMsg = "START";

HttpPlatformRequest pReq = new HttpPlatformRequest(request);
pReq.receiveData();
PlatformData in_pData = pReq.getData();

VariableList in_varList = in_pData.getVariableList();
String pushType = in_varList.getString("argPUSH_TYPE");
String pushMSG = in_varList.getString("argPUSH_MSG");

System.out.println("pushType=>" + pushType);
System.out.println("pushMSG=>" + pushMSG);  
if(pushType == null)   
{
	pushType = "PUSH";
}

DataSet ds = in_pData.getDataSet("in_Provider");

try {    

	String host = "localhost";

	int port = 50002;
	String id = "tobesoft";
	String password = "xpush"; 

	int push_count = 1;

	for(int i = 0; i < ds.getRowCount(); i ++) {

		PushMessageProvider pushMessageProvider = new PushMessageProvider();
		try {
			 
			pushMessageProvider.setUseProject(true);
			
			pushMessageProvider.connect(host, port, id, password);
			PushMessage pushMessage = new PushMessage();

			pushMessage.setProjectID(dsGet(ds,i,"PROJECT_ID"));  //PROJECT ID 
			pushMessage.setAvailablePeriod(30);//일 단위 설정 
			pushMessage.setEmergencyMessage(true);//긴급여부 무조건 true 안드로이드 FCM 용  
			
			   
			if(pushType.equals("RELI"))   
			{	
				pushMessage.setActionType(Constants.ACTION_RELI_STRING);
			} else {
			
				pushMessage.setActionType(Constants.ACTION_PUSH_STRING);
			}
			pushMessage.setCharsetName("utf-8");
			pushMessage.setTopic(dsGet(ds,i,"TOPIC_TYPE"), dsGet(ds,i,"TOPIC_ID")); //TOPIC TYPE과 ID 
			//메시지는 3개를 보내주는데  데이타 구분을 취해 TOPIC TYPE과 CODE, MSG로 전달 
			pushMessage.addData(dsGet(ds,i,"TOPIC_TYPE"));
			pushMessage.addData(dsGet(ds,i,"CODE"));
			pushMessage.addData(dsGet(ds,i,"MSG"));  
			
  
			PushResponse pushresponse = pushMessageProvider.sendPushMessage(pushMessage);
			System.out.println("response : " + pushresponse.isSucceed());
			pushMessageProvider.close();

			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

//		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
//			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (LoginFailException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ConnectionClosedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
    nErrorCode  = 0;
    strErrorMsg = "SUCC";
            
} catch (Throwable th) {
    nErrorCode  = -1;
    strErrorMsg = th.getMessage();
}

// PlatformData 
PlatformData out_pData = new PlatformData();

VariableList out_varList = out_pData.getVariableList();
out_varList.add("ErrorCode", nErrorCode);
out_varList.add("ErrorMsg" , strErrorMsg);


HttpPlatformResponse pRes = new HttpPlatformResponse(response, PlatformType.CONTENT_TYPE_XML, "UTF-8");
pRes.setData(out_pData);
pRes.sendData();

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
