/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.54
 * Generated at: 2025-01-23 07:55:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.external;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class PostCall_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<script language=\"javascript\">\r\n");
      out.write("	// window.NEXACROHTML 객체 초기화\r\n");
      out.write("	if (! window.NEXACROHTML) \r\n");
      out.write("	{\r\n");
      out.write("		window.NEXACROHTML = {};\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// Nexacro 부모창 객체 생성(가져오기)\r\n");
      out.write("	var oParent = window.NEXACROWEBBROWSER;\r\n");
      out.write("	\r\n");
      out.write("  // opener관련 오류가 발생하는 경우 아래 주석을 해지하고, 사용자의 도메인정보를 입력합니다. (\"팝업API 호출 소스\"도 동일하게 적용시켜야 합니다.)\r\n");
      out.write("  //document.domain = \"abc.go.kr\";\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("  function goPopup(){\r\n");
      out.write("  	// 호출된 페이지(jusopopup.jsp)에서 실제 주소검색URL(http://www.juso.go.kr/addrlink/addrLinkUrl.do)를 호출하게 됩니다.\r\n");
      out.write("    var pop = window.open(\"./jusoPopup.jsp\",\"pop\",\"width=570,height=420, scrollbars=yes, resizable=yes\"); \r\n");
      out.write("      \r\n");
      out.write("  	// 모바일 웹인 경우, 호출된 페이지(jusopopup.jsp)에서 실제 주소검색URL(http://www.juso.go.kr/addrlink/addrMobileLinkUrl.do)를 호출하게 됩니다.\r\n");
      out.write("    //var pop = window.open(\"/popup/jusoPopup.jsp\",\"pop\",\"scrollbars=yes, resizable=yes\"); \r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // 팝업호출\r\n");
      out.write("  goPopup();\r\n");
      out.write("  \r\n");
      out.write("  /** API 서비스 제공항목 확대 (2017.02) **/\r\n");
      out.write("  function jusoCallBack(roadFullAddr,roadAddrPart1,addrDetail,roadAddrPart2,engAddr, jibunAddr, zipNo, admCd, rnMgtSn, bdMgtSn\r\n");
      out.write("  						, detBdNmList, bdNm, bdKdcd, siNm, sggNm, emdNm, liNm, rn, udrtYn, buldMnnm, buldSlno, mtYn, lnbrMnnm, lnbrSlno, emdNo){\r\n");
      out.write("  	// 팝업페이지에서 주소입력한 정보를 받아서, 현 페이지에 정보를 등록합니다.\r\n");
      out.write("  	\r\n");
      out.write("		var sJusoInfo = \"OK!!!:::\" + roadAddrPart1 + \":::\" + roadAddrPart2 + \":::\" + addrDetail + \":::\" + zipNo;\r\n");
      out.write("		callNexacro(sJusoInfo);\r\n");
      out.write("		\r\n");
      out.write("  	document.form.roadAddrPart1.value = roadAddrPart1;\r\n");
      out.write("  	document.form.roadAddrPart2.value = roadAddrPart2;\r\n");
      out.write("  	document.form.addrDetail.value = addrDetail;\r\n");
      out.write("  	document.form.zipNo.value = zipNo;\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  // Nexacro객체-도로명주소 호출 화면에 있는 onusernotify 이벤트 함수(=도로명주소 정보들 리턴 함수)\r\n");
      out.write("  function callNexacro(userdata)\r\n");
      out.write("  {\r\n");
      out.write("    var wb = window.NEXACROWEBBROWSER;\r\n");
      out.write("  \r\n");
      out.write("    if ( wb )	// 윈도우 html5, 안드로이드 html5, iOS html5, iOS 런타임\r\n");
      out.write("    {\r\n");
      out.write("      //alert(\">>>>1\");\r\n");
      out.write("    	// HTML\r\n");
      out.write("    	wb.on_fire_onusernotify(wb, userdata);\r\n");
      out.write("    }\r\n");
      out.write("    else if (typeof nexacro == \"undefined\")	//windows runtime\r\n");
      out.write("    {\r\n");
      out.write("      //alert(\">>>>2\");\r\n");
      out.write("    	// Runtime\r\n");
      out.write("    	window.document.title = userdata;\r\n");
      out.write("    }\r\n");
      out.write("    else if (nexacro) 					 //mobile runtime - Android\r\n");
      out.write("    {	\r\n");
      out.write("      //안드로이드 런타임\r\n");
      out.write("    	nexacro.fireUserNotify(userdata);	\r\n");
      out.write("    }\r\n");
      out.write("  }	\r\n");
      out.write("	\r\n");
      out.write("    // 종료 확인창을 출력하지않고 종료.\r\n");
      out.write("    function pageClose()\r\n");
      out.write("    {\r\n");
      out.write("    		window.open(\"change\",\"_self\").close();\r\n");
      out.write("    }  \r\n");
      out.write("</script>\r\n");
      out.write("<body>\r\n");
      out.write("<form name=\"form\" id=\"form\" method=\"post\">\r\n");
      out.write("	<table >\r\n");
      out.write("			<colgroup>\r\n");
      out.write("				<col style=\"width:20%\"><col>\r\n");
      out.write("			</colgroup>\r\n");
      out.write("			<tbody>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>우편번호</th>\r\n");
      out.write("					<td>\r\n");
      out.write("					    <input type=\"hidden\" id=\"confmKey\" name=\"confmKey\" value=\"\"  >\r\n");
      out.write("						<input type=\"text\" id=\"zipNo\" name=\"zipNo\" readonly style=\"width:100px\">\r\n");
      out.write("						<input type=\"button\"  value=\"주소검색\" onclick=\"goPopup();\">\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th><label>도로명주소</label></th>\r\n");
      out.write("					<td><input type=\"text\" id=\"roadAddrPart1\" style=\"width:85%\"></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>상세주소</th>\r\n");
      out.write("						<td>\r\n");
      out.write("							<input type=\"text\" id=\"addrDetail\" style=\"width:40%\" value=\"\">\r\n");
      out.write("							<input type=\"text\" id=\"roadAddrPart2\"  style=\"width:40%\" value=\"\">\r\n");
      out.write("						</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</tbody>\r\n");
      out.write("		</table>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
